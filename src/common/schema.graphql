interface User @abstractEntity(discriminatorField: "userType") {
	id: ID! @id
	createdAt: Int! @column(overrideType: "Date")
	secondaryIds: [ID!]! @column
	logins: [Login!]! @embedded
	email: String! @column
	firstName: String! @column
	preferredName: String! @column
	lastName: String! @column
	shirtSize: ShirtSize @column
	gender: String @column
	dietaryRestrictions: [DietaryRestriction!]! @column
	race: [Race!]! @column
}

enum AuthLevel {
	HACKER
	ORGANIZER
	SPONSOR
}

enum DietaryRestriction {
	VEGETARIAN
	VEGAN
	NUT_ALLERGY
	LACTOSE_ALLERGY
	GLUTEN_FREE
	KOSHER
	HALAL
}

enum Race {
	WHITE
	BLACK_OR_AFRICAN_AMERICAN
	AMERICAN_INDIAN_OR_ALASKA_NATIVE
	ASIAN
	NATIVE_HAWAIIAN_PACIFIC_ISLANDER
	HISPANIC_OR_LATINO
}

enum Gender {
	MALE
	FEMALE
	OTHER
	PREFER_NOT_TO_SAY
}

enum ShirtSize {
	UXS
	US
	UM
	UL
	UXL
	UXXL
	WS
	WM
	WL
	WXL
	WXXL
}

enum ApplicationStatus {
	CREATED
	EMAIL_VERIFIED
	STARTED
	SUBMITTED
	ACCEPTED
	CONFIRMED
	REJECTED
}

enum LoginProvider {
	GITHUB
	GOOGLE
	SCHOOL
}

enum UserType {
	HACKER
	ORGANIZER
	SPONSOR
	SUPER_ADMIN
}

type ApplicationQuestion @entity {
	prompt: String! @column
	instruction: String @column
	note: String @column
}

type ApplicationField @entity(embedded: true) {
	id: ID! @column
	createdAt: Int! @column(overrideType: "Date")
	question: ApplicationQuestion! @embedded
	answer: String @column
}

type Login
	@entity(
		additionalFields: [{ path: "email", type: "string" }, { path: "type", type: "UserType" }]
	) {
	createdAt: Int! @column(overrideType: "Date")
	provider: LoginProvider! @column
	token: ID! @id
}

type Hacker implements User @entity {
	id: ID!
	createdAt: Int!
	secondaryIds: [ID!]!
	logins: [Login!]!
	email: String!
	firstName: String!
	preferredName: String!
	lastName: String!
	shirtSize: ShirtSize
	gender: String
	dietaryRestrictions: [DietaryRestriction!]!
	race: [Race!]!
	modifiedAt: Int! @column
	status: ApplicationStatus! @column
	school: String @column
	gradYear: Int @column
	majors: [String!]! @column
	adult: Boolean @column
	volunteer: Boolean @column
	github: String @column
	teamCode: ID @column
}

type Shift @entity(embedded: true) {
	begin: Int! @column(overrideType: "Date")
	end: Int! @column(overrideType: "Date")
}

type Mentor implements User @entity {
	id: ID!
	createdAt: Int!
	secondaryIds: [ID!]!
	logins: [Login!]!
	email: String!
	firstName: String!
	preferredName: String!
	lastName: String!
	shirtSize: ShirtSize
	gender: String
	dietaryRestrictions: [DietaryRestriction!]!
	race: [Race!]!
	shifts: [Shift!]! @embedded
	skills: [String!]! @column
}

type Team {
	id: ID!
	createdAt: Int! @column(overrideType: "Date")
	name: String @column
	members: [Hacker!]! @link
	size: Int!
}

type Organizer implements User @entity {
	id: ID!
	createdAt: Int!
	secondaryIds: [ID!]!
	logins: [Login!]!
	email: String!
	firstName: String!
	preferredName: String!
	lastName: String!
	shirtSize: ShirtSize
	gender: String
	dietaryRestrictions: [DietaryRestriction!]!
	race: [Race!]!
	permissions: [String]! @column
}
